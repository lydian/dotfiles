# example: /usr/share/doc/tmux/examples/
# {{{ screen-keys.conf
# $Id: screen-keys.conf,v 1.7 2010/07/31 11:39:13 nicm Exp $
#
# By Nicholas Marriott. Public domain.
#
# This configuration file binds many of the common GNU screen key bindings to
# appropriate tmux key bindings. Note that for some key bindings there is no
# tmux analogue and also that this set omits binding some commands available in
# tmux but not in screen.
#
# Note this is only a selection of key bindings and they are in addition to the
# normal tmux key bindings. This is intended as an example not as to be used
# as-is.

<<<<<<< 9fad2965f0b71645c0cb8b0241e5859ac8ac6b32
<<<<<<< 2b09fdb69ed3394787ca28a56b56b863edc40eef
set-option -g history-limit 9999

# if run as "tmux attach", create a session if one does not already exist
# new-session -n $HOST

# set agent-forwarding
set -g update-environment "DISPLAY SSH_ASKPASS SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY"
set-environment -g SSH_AUTH_SOCK $HOME/.ssh/ssh_auth_sock
=======
set-option -g history-limit 5000

# set ssh-agent forwarding
setenv SSH_AUTH_SOCK $HOME/.ssh/ssh_auth_sock
set-option -g history-limit 9999

# if run as "tmux attach", create a session if one does not already exist
new-session -n $HOST

# set ssh-agent forwarding
set -g update-environment "DISPLAY SSH_ASKPASS SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY"
set-environment -g SSH_AUTH_SOCK $HOME/.ssh/ssh_auth_sock

# Set the prefix to ^A.
unbind C-b
set -g prefix ^A
bind a send-prefix

# force a reload of the config file
unbind r
bind r source-file ~/.tmux.conf

# Bind appropriate commands similar to screen.
# lockscreen ^X x
unbind ^X
bind ^X lock-server
unbind x
bind x lock-server

# screen ^C c
unbind ^C
bind ^C new-window
# bind c
bind c new-window

# detach ^D d
unbind ^D
bind ^D detach

# displays *
unbind *
bind * list-clients

# next ^@ ^N sp n
unbind ^@
bind ^@ next-window
unbind ^N
bind ^N next-window
unbind " "
bind " " next-window
unbind n
bind n next-window

# title A
unbind A
bind A command-prompt "rename-window %%"

# other ^A
unbind ^A
bind ^A last-window

# prev ^H ^P p ^?
unbind ^H
bind ^H previous-window
unbind ^P
bind ^P previous-window
unbind p
bind p previous-window
unbind BSpace
bind BSpace previous-window

# windows ^W w
unbind ^W
bind ^W list-windows
unbind w
bind w list-windows

# quit \
unbind \
bind \ confirm-before "kill-server"

# kill K k
unbind K
bind K confirm-before "kill-window"
unbind k
bind k confirm-before "kill-window"

# redisplay l
unbind l
bind l refresh-client

# :kB: focus up
unbind Tab
bind Tab select-pane -t:.+
unbind BTab
bind BTab select-pane -t:.-

# move-window -s src -t target ^N
unbind C-n
bind C-n move-window
unbind ^N
bind ^N move-window
unbind C-n
bind C-n move-window

# " windowlist -b
unbind '"'
bind '"' choose-window

# }}}
# {{{ vim-keys.conf
# $Id: vim-keys.conf,v 1.2 2010/09/18 09:36:15 nicm Exp $
#
# vim-keys.conf, v1.2 2010/09/12
#
# By Daniel Thau.  Public domain.
#
# This configuration file binds many vi- and vim-like bindings to the
# appropriate tmux key bindings.  Note that for many key bindings there is no
# tmux analogue.  This is intended for tmux 1.3, which handles pane selection
# differently from the previous versions

# split windows like vim
# vim's definition of a horizontal/vertical split is reversed from tmux's
bind s split-window -v
bind v split-window -h

# move around panes with hjkl, as one would in vim after pressing ctrl-w
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# resize panes like vim
# feel free to change the "1" to however many lines you want to resize by, only
# one at a time can be slow
bind < resize-pane -L 1
bind > resize-pane -R 1
bind - resize-pane -D 1
bind + resize-pane -U 1

# Maximized pane
#unbind "Up"    
#bind "Up" new-window -d -n tmp; swap-pane -s tmp.1; select-window -t tmp
# restore maximized pane
#unbind "Down"  
#bind "Down" last-window; swap-pane -s tmp.1; kill-window -t tmp

# bind : to command-prompt like vim
# this is the default in tmux already
bind : command-prompt

# toggle mouse mode to allow mouse copy/paste
# set mouse on with prefix m
bind m set -g mode-mouse on \; set -g mouse-resize-pane on \; set -g mouse-select-pane on \; set -g mouse-select-window on \; display 'Mouse: ON'
# set mouse off with prefix M
bind M set -g mode-mouse off \; set -g mouse-resize-pane off \; set -g mouse-select-pane off \; set -g mouse-select-window off \; display 'Mouse: OFF'

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim, enter to finish selection
bind -t vi-copy 'v' begin-selection
bind -t vi-copy 'y' copy-pipe "tmux save-buffer -|~/.dotfiles/package/remotecopy/remotecopy"
bind -t vi-copy MouseDragEnd1Pane copy-pipe "tmux save-buffer -|~/.dotfiles/package/remotecopy/remotecopy"

bind -n C-x run "tmux save-buffer -| ~/.dotfiles/package/remotecopy/remotecopy" \; display "Copied to clipboard"
bind c-p run "xsel -o | tmux load-buffer -"

# vim-tmux-navigator
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

set -g default-terminal "screen-256color" # + "tmux -2" => 256 color
set -g status-justify left
set -g status-interval 15 # 15 sec refresh
set -g display-time 3000
set -g status-bg black
set -g status-fg white
set-window-option -g window-status-current-fg blue
set-window-option -g window-status-current-bg yellow
set-window-option -g window-status-current-attr default # bright
set -g status-left-length 15
set -g status-right-length 55
set -g status-left "#[fg=white,bg=blue] > #S < #[default] |" # session-name
